View(getdat_qz1q2)
q2 <- getdat_qz1q2$X.3[5:235]
q2
gsub(",","",q2)
mean(q2)
q2 <- getdat_qz1q2$X.3[5:194]
gsub(",","",q2)
as.numeric(q2)
as.numeric("2342")
mean(as.numeric(q2))
q2[1]
q2 <- gsub(",","",q2)
q2[1]
as.numeric(q2)
mean(as.numeric(q2))
grep("^United",getdat_qz1q2$X.2)
GDP
?read.csv
getdat_qz1q2 <- read.csv("getdat_qz1q2.csv", skip = 5, nrows = 190, header = F, col.names = c("CountryCode", "Ranking", "BS" , "Long.Name", "Economy(millions of US$)","BS1"))
getdat_qz1q2 <- read.csv("getdat_qz1q2.csv", skip = 5, nrows = 190, header = F, col.names = c("CountryCode", "Ranking", "BS" , "Long.Name", "Economy(millions of US$)","BS1","BS2","BS3","BS4","BS5"))
View(getdat_qz1q2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "get_data_us_edu_data.csv")
read.csv("get_data_us_edu_data.csv")
edu_data <- read.csv("get_data_us_edu_data.csv")
View(edu_data)
GDP <- getdat_qz1q2[,c(1,2,4,5)]
View(GDP)
GDP_edu <- merge(GDP,edu_data,CountryCode)
?merge
GDP_edu <- merge(GDP,edu_data,by = "CountryCode")
View(GDP_edu)
sum(edu_data$CountryCode %in% GDP$CountryCode )
grep("June", GDP_edu, ignore.case = T)
grep("June", GDP_edu$Special.Notes , ignore.case = T)
sum(grepl("June", GDP_edu$Special.Notes , ignore.case = T))
grep("June", GDP_edu$Special.Notes , ignore.case = T, value = T)
grep("Fiscal year end: June", GDP_edu$Special.Notes , ignore.case = T, value = T)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes[234]
class(sampleTimes)
as.POSIXlt(sampleTimes)
weekdays(sampleTimes)
grep("^2012", sampleTimes)
sT <- sampleTimes[grep("^2012", sampleTimes)]
ST <- weekdays(sT)
ST["Monday"]
grep("Monday",ST)
sum(grepl("Monday",ST))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
mean(x)
x
mean(x[1:4])
mean(x[5:8])
mean(x[9:12])
x <- rnorm(12, mean = rep(3:1, each = 4), sd = 0.2)
mean(x[9:12])
mean(x[5:8])
mean(x[1:4])
?dist
dist(data.frame(x = c(1,2,3,4), y = c(5,6,7,8)))
dist(data.frame(x = c(1,2,3,4), y = c(5,6,7,8), z = (1,1,2,2)))
dist(data.frame(x = c(1,2,3,4), y = c(5,6,7,8), z = (1,1,2,2))[1:2])
dist(data.frame(x = c(1,2,3,4), y = c(5,6,7,8)))
dist(data.frame(x = c(1,2,3,4), y = c(5,6,7,8), z= rep(1,4)))
dist(data.frame( y = c(5,6,7,8), z= rep(1,4)))
library(swirl)
rm(list = ls())
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
View(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN"|country =="US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version),ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex","class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
ssubmit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = rep("passed", dim(passed)[1]) )
rep("passed", dim(passed)[1])
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minute(now()), second(now()))
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
t()
?t
t(matrix(rnorm(20), nrow = 10))
rbinom(10, size = 3, prob = c(0.5,0.3,0.2))
?rbinom
rbinom(10, size = 3, prob = c(0.5,0.3))
rbinom(10, size = 3, prob = c(0.5))
rbinom(10, size = 3, prob = c(0))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.001))
rbinom(10, size = 3, prob = c(0.99))
rbinom(10, size = 3, prob = c(0.99))
rbinom(10, size = 3, prob = c(0.99))
rbinom(10, size = 3, prob = c(0.99))
rbinom(10, size = 3, prob = c(0.99))
rbinom(10, size = 3, prob = c(0.9))
rbinom(10, size = 3, prob = c(0.9,0.01,0.5))
rbinom(10, size = 3, prob = c(0.9,0.01,0.5))
rbinom(10, size = 3, prob = c(0.9,0.01,0.5))
rbinom(10, size = 3, prob = c(0.9,0.01,0.5))
install.packages("kernlab")
library(kernlab)
head(spam)
?data
data(spam)
head(spam)
View(spam)
?rbeta
pbeta(0.75, 2, 1)
pbeta(0.75, 1,2)
pbeta(0.75, 0.5,4)
pbeta(0.75, 0.25,4*2)
pbeta(0.75,1,1)
pbeta(0.75,4,4)
numerator <- 0.75 * 0.3
denominator <- numerator + 0.7 * 0.48
prob <- numerator/denominator
?apply
?pbinom
?cumcum
?cumsum
cumsum(c(1,2,3,4,5))
mean(c(T,F,T,T,T) & c(F,T,T,F,T,T))
mean(c(T,F,T,T,T) & c(F,T,T,F,T))
ppois(10, lambda = 15)
install.packages("UsingR")
library(UsingR)
data("galton")
library(reshape)
install.packages("reshape")
library(reshape)
long <- melt(galton)
View(long)
View(galton)
?cast
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
freqData
table(galton$child, galton$parent)
as.data.frame(table(galton$child, galton$parent))
?table
?as.data.frame
?scale_size
?lm
?I
sum(2,3)
sum(2,3,8)
sum(2*0.18,-1.54, 0.42*3,0.95)
sum(2*0.18,-1.54, 0.42*3,0.95) / 7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
library(datasets)
data("mtcars")
mtcars
lm(mpg ~ wt, mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <- ( x - mean(x)) / sd(x)
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(x~y)
xn <- ( x - mean(x)) / sd(x)
yn <- ( y - mean(y)) / sd(y)
mean(xn)
mean(yn)
lm(yn~xn)
x <- c( -3,-2,-1,0,1,2,3)
y <- c(-6,-4,-2,0,2,4,6)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
install.packages("rmarkdown")
?par
setwd(~/Document)
setwd("~/Documents")
setwd("Documents")
setwd("~/Coursera")
setwd("~/Coursera/RepData_PeerAssessment1/RepData_PeerAssessment1")
list.files()
rm(list = "ls")
rm(list = ls())
unzip
?unzip
unzip("activity.zip")
unzip("activity.zip") -l
unzip -l("activity.zip")
unzip("activity.zip" -l)
unzip("activity.zip", list = T)
activity_data <- read.csv("activity.csv")
View(activity_data)
class(activity_data$date)
str(activity_data$date)
class(activity_data$interval)
weekdays()
?weekdays
weekdays(activity_data[1,2])
as.Date(activity_data[1,2])
weekdays(as.Date(activity_data[1,2]))
weekdays(as.Date(activity_data[,2]))
sum(weekdays(as.Date(activity_data[,2]))=="Sunday"|weekdays(as.Date(activity_data[,2]))=="Saturday")
?transform
trans <- transform(activity_data, date = as.Date(date))
View(trans)
class(trans$date)
sum(weekdays(trans$date)=="Sunday"|weekdays(trans$date)=="Saturday")
sum(weekdays(unique(trans$date))=="Sunday"|weekdays(unique(trans$date))=="Saturday")
?as.factor()
weekday_fac <- factor(weekdays(unique(trans$date))=="Sunday"|weekdays(unique(trans$date))=="Saturday")
weekday_fac[1:289]
weekday_fac <- factor(weekdays(trans$date)=="Sunday"|weekdays(trans$date)=="Saturday")
weekday_fac[1:289]
weekday_fac <- factor(weekdays(trans$date)=="Sunday"|weekdays(trans$date)=="Saturday", labels = c("Weekdays","Weekends"))
weekday_fac[1:289]
rm(list = ls())
activity_data <- read.csv("activity.csv")
View(activity_data)
activity_data <- transform(activity_data, date = as.Date(date), interval = factor(interval))
View(activity_data)
?mutate
library(dplyr)
?mutate
act_weekday_data <- mutate(activity_data, DayofWeek <- factor(weekdays(activity_data$date)=="Sunday"|
weekdays(activity_data$date)=="Saturday",
labels = c("Weekday","Weekend")))
View(act_weekday_data)
act_weekday_data <- mutate(activity_data, DayofWeek = factor(weekdays(activity_data$date)=="Sunday"|
weekdays(activity_data$date)=="Saturday",
labels = c("Weekday","Weekend")))
table(act_weekday_data$DayofWeek)
act_data_imputed <- activity_data %>% group_by(interval) %>% summarize(steps, mean())
act_data_imputed <- activity_data %>% group_by(interval) %>% summarize(steps, mean)
act_data_imputed <- activity_data %>% group_by(interval) %>% summarize(steps, mean, na.rm =T)
act_data_imputed <- activity_data %>% group_by(interval) %>% summarize(steps = mean(steps,na.rm=TRUE))
View(act_data_imputed)
sum(is.na(activity_data$steps))
act_data_NA <- activity_data[is.na(activity_data$steps)]
act_data_NA <- activity_data[is.na(activity_data$steps),]
View(act_data_NA)
unzip("activity.zip", list = T)
unzip("activity.zip", list = T)[1]
read.csv(unzip("activity.zip", list = T)[1])
list <-unzip("activity.zip", list = T)
read.csv(list[1])
steps_perday <- activity_data %>% group_by(date) %>% summarize(avg_steps =  mean(steps,na.rm = TRUE))
View(steps_perday)
mean(activity_data$steps[289:576])
?hist
hist(steps_perday$avg_steps)
steps_perday <- activity_data %>% group_by(date) %>% summarize(tot_steps =  sum(steps,na.rm = TRUE))
View(steps_perday)
hist(steps_perday$avg_steps)
hist(steps_perday$tot_steps)
library(ggplot2)
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 10 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 100 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 1000 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 3000 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 2000 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 1500 )
g
g <- ggplot(steps_perday, aes(x = tot_steps)) + geom_histogram(fill = "salmon", color = "black", binwidth = 1000 )
g
median(steps_perday$tot_steps)
mean(steps_perday$tot_steps)
act_pattern <- activity_data %>% group_by(interval) %>%
summarize(steps = mean(steps,na.rm=TRUE))
View(act_pattern)
act_pattern$interval[which.max(act_pattern$steps)]
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line(color = "salmon", size = 2 )
g1
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line()
g1
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_point()
g1
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line()
g1
act_pattern <- transform(act_pattern, interval = as.numeric(interval))
View(act_pattern)
activity_data <- read.csv("activity.csv")
activity_data <- transform(activity_data, date = as.Date(date))
act_pattern <- activity_data %>% group_by(interval) %>%
summarize(steps = mean(steps,na.rm=TRUE))
View(act_pattern)
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line()
g1
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line(color = "salmon", size = 2 )
g1
g1 <- ggplot(act_pattern, aes(x = interval, y = steps)) + geom_line(color = "salmon", size = 1 )
g1
View(act_data_NA)
unique(act_data_NA$date)
act_data_NA[1,1] <- 2
View(act_data_NA)
act_data_NA[1,1] <- NA
View(act_data_NA)
View(act_data_imputed)
log_NA_actdt <-  is.na(activity_data$steps)
NA_index <- which(log_NA_actdt)
sum(log_NA_actdt)
NA_index
activity_data[activity_data$interval==2017,]
activity_data[activity_data$interval=2017,]
activity_data[activity_data$interval == 2017,]
activity_data[activity_data$interval == "2017",]
activity_data[2017,]
activity_data[2045,3]
act_pattern[act_pattern$interval == 3,2]
act_pattern[act_pattern$interval == 220,2]
act_pattern[act_pattern$interval == 225,2]
act_pattern[act_pattern$interval == activity_data[2045,3],2]
act_pattern[act_pattern$interval == activity_data[2046,3],2]
act_data_imputed <- activity_data
View(act_data_imputed)
for(i in NA_index){
act_data_imputed[i,1] <- act_pattern[act_pattern$interval == activity_data[i,3],2]
}
View(act_data_imputed)
act_data_imputed[NA_index]
act_data_imputed[NA_index,]
imputed_NA <- act_data_imputed[NA_index,]
View(imputed_NA)
View(act_data_imputed)
act_weekday_data <- mutate(act_data_imputed,
DayofWeek = factor(weekdays(date)=="Sunday"|
weekdays(date)=="Saturday",
labels = c("Weekday","Weekend")))
View(act_weekday_data)
